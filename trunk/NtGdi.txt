// from http://svn.reactos.org/svn/reactos/trunk/reactos/include/psdk/ntgdi.h?revision=32830&content-type=text%2Fplain
/*
 * NtGdi Entrypoints
 */
#ifndef _NTGDI_
#define _NTGDI_

#ifndef W32KAPI
#define W32KAPI DECLSPEC_ADDRSAFE
#endif

#ifndef _WINDOWBLT_NOTIFICATION_
#define _WINDOWBLT_NOTIFICATION_
#endif

#define TRACE_SURFACE_ALLOCS    (DBG || 0)

/* NtGdiGetLinkedUfis */
#define FL_UFI_PRIVATEFONT     1
#define FL_UFI_DESIGNVECTOR_PFF   2
#define FL_UFI_MEMORYFONT      4

/* NtGdiSetIcmMode */
#define ICM_SET_MODE        1
#define ICM_SET_CALIBRATE_MODE   2
#define ICM_SET_COLOR_MODE     3
#define ICM_CHECK_COLOR_MODE    4

/* NtGdiCreateColorSpace */
#define LCSEX_ANSICREATED      1
#define LCSEX_TEMPPROFILE      2

/* NtGdiGetStats */
#define GS_NUM_OBJS_ALL       0
#define GS_HANDOBJ_CURRENT     1
#define GS_HANDOBJ_MAX       2
#define GS_HANDOBJ_ALLOC      3
#define GS_LOOKASIDE_INFO      4

/* NtGdiQueryFonts */
#define TYPE_ENUMFONTS       1
#define TYPE_ENUMFONTFAMILIES    2
#define TYPE_ENUMFONTFAMILIESEX   3

typedef enum _COLORPALETTEINFO
{
  ColorPaletteQuery,
  ColorPaletteSet
} COLORPALETTEINFO, *PCOLORPALETTEINFO;

/* NtGdiIcmBrushInfo */
typedef enum _ICM_DIB_INFO_CMD
{
  IcmQueryBrush,
  IcmSetBrush
} ICM_DIB_INFO, *PICM_DIB_INFO;

/* NtGdiCreateColorSpace */
typedef struct _LOGCOLORSPACEEXW
{
  LOGCOLORSPACEW lcsColorSpace;
  DWORD dwFlags;
} LOGCOLORSPACEEXW, *PLOGCOLORSPACEEXW;

typedef struct _POLYPATBLT
{
 INT nXLeft;
 INT nYLeft;
 INT nWidth;
 INT nHeight;
 HBRUSH hBrush;
} POLYPATBLT, *PPOLYPATBLT;

/* NtGdiAddRemoteMMInstanceToDC */
typedef struct tagDOWNLOADDESIGNVECTOR
{
  UNIVERSAL_FONT_ID ufiBase;
  DESIGNVECTOR dv;
} DOWNLOADDESIGNVECTOR;

W32KAPI
BOOL
NTAPI
NtGdiInit(
  VOID);

W32KAPI
INT
NTAPI
NtGdiSetDIBitsToDeviceInternal(
  IN HDC hdcDest,
  IN INT xDst,
  IN INT yDst,
  IN DWORD cx,
  IN DWORD cy,
  IN INT xSrc,
  IN INT ySrc,
  IN DWORD iStartScan,
  IN DWORD cNumScan,
  IN LPBYTE pInitBits,
  IN LPBITMAPINFO pbmi,
  IN DWORD iUsage,
  IN UINT cjMaxBits,
  IN UINT cjMaxInfo,
  IN BOOL bTransformCoordinates,
  IN OPTIONAL HANDLE hcmXform
);

W32KAPI
BOOL
NTAPI
NtGdiGetFontResourceInfoInternalW(
  IN LPWSTR pwszFiles,
  IN ULONG cwc,
  IN ULONG cFiles,
  IN UINT cjIn,
  OUT LPDWORD pdwBytes,
  OUT LPVOID pvBuf,
  IN DWORD iType
);

W32KAPI
DWORD
NTAPI
NtGdiGetGlyphIndicesW(
  IN HDC hdc,
  IN OPTIONAL LPWSTR pwc,
  IN INT cwc,
  OUT OPTIONAL LPWORD pgi,
  IN DWORD iMode
);

W32KAPI
DWORD
NTAPI
NtGdiGetGlyphIndicesWInternal(
  IN HDC hdc,
  IN OPTIONAL LPWSTR pwc,
  IN INT cwc,
  OUT OPTIONAL LPWORD pgi,
  IN DWORD iMode,
  IN BOOL bSubset
);

W32KAPI
HPALETTE
NTAPI
NtGdiCreatePaletteInternal(
  IN LPLOGPALETTE pLogPal,
  IN UINT cEntries
);

W32KAPI
BOOL
NTAPI
NtGdiArcInternal(
  IN ARCTYPE arctype,
  IN HDC hdc,
  IN INT x1,
  IN INT y1,
  IN INT x2,
  IN INT y2,
  IN INT x3,
  IN INT y3,
  IN INT x4,
  IN INT y4
);

W32KAPI
INT
NTAPI
NtGdiStretchDIBitsInternal(
  IN HDC hdc,
  IN INT xDst,
  IN INT yDst,
  IN INT cxDst,
  IN INT cyDst,
  IN INT xSrc,
  IN INT ySrc,
  IN INT cxSrc,
  IN INT cySrc,
  IN OPTIONAL LPBYTE pjInit,
  IN LPBITMAPINFO pbmi,
  IN DWORD dwUsage,
  IN DWORD dwRop4,
  IN UINT cjMaxInfo,
  IN UINT cjMaxBits,
  IN HANDLE hcmXform
);

W32KAPI
ULONG
NTAPI
NtGdiGetOutlineTextMetricsInternalW(
  IN HDC hdc,
  IN ULONG cjotm,
  OUT OPTIONAL POUTLINETEXTMETRICW potmw,
  OUT PTMDIFF ptmd
);

W32KAPI
BOOL
NTAPI
NtGdiGetAndSetDCDword(
  IN HDC hdc,
  IN UINT u,
  IN DWORD dwIn,
  OUT PDWORD pdwResult
);

W32KAPI
HANDLE
NTAPI
NtGdiGetDCObject(
  IN HDC hdc,
  IN INT itype
);

W32KAPI
HDC
NTAPI
NtGdiGetDCforBitmap(
  IN HBITMAP hsurf
);

W32KAPI
BOOL
NTAPI
NtGdiGetMonitorID(
  IN HDC hdc,
  IN DWORD dwSize,
  OUT LPWSTR pszMonitorID
);

W32KAPI
INT
NTAPI
NtGdiGetLinkedUFIs(
  IN HDC hdc,
  OUT PUNIVERSAL_FONT_ID pufiLinkedUFIs,
  IN INT BufferSize
);

W32KAPI
BOOL
NTAPI
NtGdiSetLinkedUFIs(
  IN HDC hdc,
  IN PUNIVERSAL_FONT_ID pufiLinks,
  IN ULONG uNumUFIs
);

W32KAPI
BOOL
NTAPI
NtGdiGetUFI(
  IN HDC hdc,
  OUT PUNIVERSAL_FONT_ID pufi,
  OUT DESIGNVECTOR *pdv,
  OUT ULONG *pcjDV,
  OUT ULONG *pulBaseCheckSum,
  OUT FLONG *pfl
);

W32KAPI
BOOL
NTAPI
NtGdiForceUFIMapping(
  IN HDC hdc,
  IN PUNIVERSAL_FONT_ID pufi
);

W32KAPI
BOOL
NTAPI
NtGdiGetUFIPathname(
  IN PUNIVERSAL_FONT_ID pufi,
  OUT OPTIONAL PULONG pcwc,
  OUT OPTIONAL LPWSTR pwszPathname,
  OUT OPTIONAL ULONG pcNumFiles,
  IN FLONG fl,
  OUT OPTIONAL PBOOL pbMemFont,
  OUT OPTIONAL PULONG pcjView,
  OUT OPTIONAL PVOID pvView,
  OUT OPTIONAL PBOOL pbTTC,
  OUT OPTIONAL PULONG piTTC
);

W32KAPI
BOOL
NTAPI
NtGdiAddRemoteFontToDC(
  IN HDC hdc,
  IN PVOID pvBuffer,
  IN ULONG cjBuffer,
  IN OPTIONAL PUNIVERSAL_FONT_ID pufi
);

W32KAPI
HANDLE
NTAPI
NtGdiAddFontMemResourceEx(
  IN PVOID pvBuffer,
  IN DWORD cjBuffer,
  IN PDESIGNVECTOR pdv,
  IN ULONG cjDV,
  OUT PDWORD pNumFonts
);

W32KAPI
BOOL
NTAPI
NtGdiRemoveFontMemResourceEx(
  IN HANDLE hMMFont
);

W32KAPI
BOOL
NTAPI
NtGdiUnmapMemFont(
  IN PVOID pvView
);

W32KAPI
BOOL
NTAPI
NtGdiRemoveMergeFont(
  IN HDC hdc,
  IN PUNIVERSAL_FONT_ID pufi
);

W32KAPI
BOOL
NTAPI
NtGdiAnyLinkedFonts(
  VOID void
);

W32KAPI
BOOL
NTAPI
NtGdiGetEmbUFI(
  IN HDC hdc,
  OUT PUNIVERSAL_FONT_ID pufi,
  OUT OPTIONAL PDESIGNVECTOR pdv,
  OUT PULONG pcjDV,
  OUT PULONG pulBaseCheckSum,
  OUT PFLONG pfl,
  OUT PKERNEL_PVOID embFontID
);

W32KAPI
ULONG
NTAPI
NtGdiGetEmbedFonts(
  VOID void
);

W32KAPI
BOOL
NTAPI
NtGdiChangeGhostFont(
  IN KERNEL_PVOID *pfontID,
  IN BOOL bLoad
);

W32KAPI
BOOL
NTAPI
NtGdiAddEmbFontToDC(
  IN HDC hdc,
  IN VOID **pFontID
);

W32KAPI
BOOL
NTAPI
NtGdiFontIsLinked(
  IN HDC hdc
);

W32KAPI
ULONG_PTR
NTAPI
NtGdiPolyPolyDraw(
  IN HDC hdc,
  IN PPOINT ppt,
  IN PULONG pcpt,
  IN ULONG ccpt,
  IN INT iFunc
);

W32KAPI
LONG
NTAPI
NtGdiDoPalette(
  IN HGDIOBJ hObj,
  IN WORD iStart,
  IN WORD cEntries,
  IN LPVOID pEntries,
  IN DWORD iFunc,
  IN BOOL bInbound
);

W32KAPI
BOOL
NTAPI
NtGdiComputeXformCoefficients(
  IN HDC hdc
);

W32KAPI
BOOL
NTAPI
NtGdiGetWidthTable(
  IN HDC hdc,
  IN ULONG cSpecial,
  IN WCHAR *pwc,
  IN ULONG cwc,
  OUT USHORT *psWidth,
  OUT OPTIONAL WIDTHDATA *pwd,
  OUT FLONG *pflInfo
);

W32KAPI
INT
NTAPI
NtGdiDescribePixelFormat(
  IN HDC hdc,
  IN INT ipfd,
  IN UINT cjpfd,
  OUT PPIXELFORMATDESCRIPTOR ppfd
);

W32KAPI
BOOL
NTAPI
NtGdiSetPixelFormat(
  IN HDC hdc,
  IN INT ipfd
);

W32KAPI
BOOL
NTAPI
NtGdiSwapBuffers(
  IN HDC hdc
);

W32KAPI
INT
NTAPI
NtGdiSetupPublicCFONT(
  IN HDC hdc,
  IN OPTIONAL HFONT hf,
  IN ULONG ulAve
);

W32KAPI
DWORD
NTAPI
NtGdiDxgGenericThunk(
  IN ULONG_PTR ulIndex,
  IN ULONG_PTR ulHandle,
  INOUT PSIZE_T pdwSizeOfPtr1,
  INOUT PVOID pvPtr1,
  INOUT PSIZE_T pdwSizeOfPtr2,
  INOUT PVOID pvPtr2
);

W32KAPI
DWORD
NTAPI
NtGdiDdAddAttachedSurface(
  IN HANDLE hSurface,
  IN HANDLE hSurfaceAttached,
  INOUT PDD_ADDATTACHEDSURFACEDATA puAddAttachedSurfaceData
);

W32KAPI
BOOL
NTAPI
NtGdiDdAttachSurface(
  IN HANDLE hSurfaceFrom,
  IN HANDLE hSurfaceTo
);

W32KAPI
DWORD
NTAPI
NtGdiDdBlt(
  IN HANDLE hSurfaceDest,
  IN HANDLE hSurfaceSrc,
  INOUT PDD_BLTDATA puBltData
);

W32KAPI
DWORD
NTAPI
NtGdiDdCanCreateSurface(
  IN HANDLE hDirectDraw,
  INOUT PDD_CANCREATESURFACEDATA puCanCreateSurfaceData
);

W32KAPI
DWORD
NTAPI
NtGdiDdColorControl(
  IN HANDLE hSurface,
  INOUT PDD_COLORCONTROLDATA puColorControlData
);

W32KAPI
HANDLE
NTAPI
NtGdiDdCreateDirectDrawObject(
  IN HDC hdc
);

W32KAPI
DWORD
NTAPI
NtGdiDdCreateSurface(
  IN HANDLE hDirectDraw,
  IN PHANDLE hSurface,
  INOUT PDDSURFACEDESC puSurfaceDescription,
  INOUT PDD_SURFACE_GLOBAL puSurfaceGlobalData,
  INOUT PDD_SURFACE_LOCAL puSurfaceLocalData,
  INOUT PDD_SURFACE_MORE puSurfaceMoreData,
  INOUT PDD_CREATESURFACEDATA puCreateSurfaceData,
  OUT PHANDLE puhSurface
);

W32KAPI
HANDLE
NTAPI
NtGdiDdCreateSurfaceObject(
  IN HANDLE hDirectDrawLocal,
  IN HANDLE hSurface,
  IN PDD_SURFACE_LOCAL puSurfaceLocal,
  IN PDD_SURFACE_MORE puSurfaceMore,
  IN PDD_SURFACE_GLOBAL puSurfaceGlobal,
  IN BOOL bComplete
);

W32KAPI
BOOL
NTAPI
NtGdiDdDeleteSurfaceObject(
  IN HANDLE hSurface
);

W32KAPI
BOOL
NTAPI
NtGdiDdDeleteDirectDrawObject(
  IN HANDLE hDirectDrawLocal
);

W32KAPI
DWORD
NTAPI
NtGdiDdDestroySurface(
  IN HANDLE hSurface,
  IN BOOL bRealDestroy
);

W32KAPI
DWORD
NTAPI
NtGdiDdFlip(
  IN HANDLE hSurfaceCurrent,
  IN HANDLE hSurfaceTarget,
  IN HANDLE hSurfaceCurrentLeft,
  IN HANDLE hSurfaceTargetLeft,
  INOUT PDD_FLIPDATA puFlipData
);

W32KAPI
DWORD
NTAPI
NtGdiDdGetAvailDriverMemory(
  IN HANDLE hDirectDraw,
  INOUT PDD_GETAVAILDRIVERMEMORYDATA puGetAvailDriverMemoryData
);

W32KAPI
DWORD
NTAPI
NtGdiDdGetBltStatus(
  IN HANDLE hSurface,
  INOUT PDD_GETBLTSTATUSDATA puGetBltStatusData
);

W32KAPI
HDC
NTAPI
NtGdiDdGetDC(
  IN HANDLE hSurface,
  IN PPALETTEENTRY puColorTable
);

W32KAPI
DWORD
NTAPI
NtGdiDdGetDriverInfo(
  IN HANDLE hDirectDraw,
  INOUT PDD_GETDRIVERINFODATA puGetDriverInfoData
);

W32KAPI
DWORD
NTAPI
NtGdiDdGetFlipStatus(
  IN HANDLE hSurface,
  INOUT PDD_GETFLIPSTATUSDATA puGetFlipStatusData
);

W32KAPI
DWORD
NTAPI
NtGdiDdGetScanLine(
  IN HANDLE hDirectDraw,
  INOUT PDD_GETSCANLINEDATA puGetScanLineData
);

W32KAPI
DWORD
NTAPI
NtGdiDdSetExclusiveMode(
  IN HANDLE hDirectDraw,
  INOUT PDD_SETEXCLUSIVEMODEDATA puSetExclusiveModeData
);

W32KAPI
DWORD
NTAPI
NtGdiDdFlipToGDISurface(
  IN HANDLE hDirectDraw,
  INOUT PDD_FLIPTOGDISURFACEDATA puFlipToGDISurfaceData
);

W32KAPI
DWORD
NTAPI
NtGdiDdLock(
  IN HANDLE hSurface,
  INOUT PDD_LOCKDATA puLockData,
  IN HDC hdcClip
);

W32KAPI
BOOL
NTAPI
NtGdiDdQueryDirectDrawObject(
  IN HANDLE hDirectDrawLocal,
  OUT PDD_HALINFO pHalInfo,
  OUT PDWORD pCallBackFlags,
  OUT OPTIONAL LPD3DNTHAL_CALLBACKS puD3dCallbacks,
  OUT OPTIONAL LPD3DNTHAL_GLOBALDRIVERDATA puD3dDriverData,
  OUT OPTIONAL PDD_D3DBUFCALLBACKS puD3dBufferCallbacks,
  OUT OPTIONAL LPDDSURFACEDESC puD3dTextureFormats,
  OUT PDWORD puNumHeaps,
  OUT OPTIONAL PVIDEOMEMORY puvmList,
  OUT PDWORD puNumFourCC,
  OUT OPTIONAL PDWORD puFourCC
);

W32KAPI
BOOL
NTAPI
NtGdiDdReenableDirectDrawObject(
  IN HANDLE hDirectDrawLocal,
  INOUT PBOOL pubNewMode
);

W32KAPI
BOOL
NTAPI
NtGdiDdReleaseDC(
  IN HANDLE hSurface
);

W32KAPI
BOOL
NTAPI
NtGdiDdResetVisrgn(
  IN HANDLE hSurface,
  IN HWND hwnd
);

W32KAPI
DWORD
NTAPI
NtGdiDdSetColorKey(
  IN HANDLE hSurface,
  INOUT PDD_SETCOLORKEYDATA puSetColorKeyData
);

W32KAPI
DWORD
NTAPI
NtGdiDdSetOverlayPosition(
  IN HANDLE hSurfaceSource,
  IN HANDLE hSurfaceDestination,
  INOUT PDD_SETOVERLAYPOSITIONDATA puSetOverlayPositionData
);

W32KAPI
DWORD
NTAPI
NtGdiDdUnattachSurface(
  IN HANDLE hSurface,
  IN HANDLE hSurfaceAttached
);

W32KAPI
DWORD
NTAPI
NtGdiDdUnlock(
  IN HANDLE hSurface,
  INOUT PDD_UNLOCKDATA puUnlockData
);

W32KAPI
DWORD
NTAPI
NtGdiDdUpdateOverlay(
  IN HANDLE hSurfaceDestination,
  IN HANDLE hSurfaceSource,
  INOUT PDD_UPDATEOVERLAYDATA puUpdateOverlayData
);

W32KAPI
DWORD
NTAPI
NtGdiDdWaitForVerticalBlank(
  IN HANDLE hDirectDraw,
  INOUT PDD_WAITFORVERTICALBLANKDATA puWaitForVerticalBlankData
);

W32KAPI
HANDLE
NTAPI
NtGdiDdGetDxHandle(
  IN OPTIONAL HANDLE hDirectDraw,
  IN OPTIONAL HANDLE hSurface,
  IN BOOL bRelease
);

W32KAPI
BOOL
NTAPI
NtGdiDdSetGammaRamp(
  IN HANDLE hDirectDraw,
  IN HDC hdc,
  IN LPVOID lpGammaRamp
);

W32KAPI
DWORD
NTAPI
NtGdiDdLockD3D(
  IN HANDLE hSurface,
  INOUT PDD_LOCKDATA puLockData
);

W32KAPI
DWORD
NTAPI
NtGdiDdUnlockD3D(
  IN HANDLE hSurface,
  INOUT PDD_UNLOCKDATA puUnlockData
);

W32KAPI
DWORD
NTAPI
NtGdiDdCreateD3DBuffer(
  IN HANDLE hDirectDraw,
  INOUT PHANDLE hSurface,
  INOUT PDDSURFACEDESC puSurfaceDescription,
  INOUT PDD_SURFACE_GLOBAL puSurfaceGlobalData,
  INOUT PDD_SURFACE_LOCAL puSurfaceLocalData,
  INOUT PDD_SURFACE_MORE puSurfaceMoreData,
  INOUT PDD_CREATESURFACEDATA puCreateSurfaceData,
  INOUT PHANDLE puhSurface
);

W32KAPI
DWORD
NTAPI
NtGdiDdCanCreateD3DBuffer(
  IN HANDLE hDirectDraw,
  INOUT PDD_CANCREATESURFACEDATA puCanCreateSurfaceData
);

W32KAPI
DWORD
NTAPI
NtGdiDdDestroyD3DBuffer(
  IN HANDLE hSurface
);

W32KAPI
BOOL
NTAPI
NtGdiD3dContextCreate(
  IN HANDLE hDirectDrawLocal,
  IN HANDLE hSurfColor,
  IN HANDLE hSurfZ,
  INOUT PD3DNTHAL_CONTEXTCREATEI pdcci
);

W32KAPI
DWORD
NTAPI
NtGdiD3dContextDestroy(
  IN LPD3DNTHAL_CONTEXTDESTROYDATA pdcdd
);

W32KAPI
DWORD
NTAPI
NtGdiD3dContextDestroyAll(
  OUT LPD3DNTHAL_CONTEXTDESTROYALLDATA pdcdad
);

W32KAPI
DWORD
NTAPI
NtGdiD3dValidateTextureStageState(
  INOUT LPD3DNTHAL_VALIDATETEXTURESTAGESTATEDATA pData
);

W32KAPI
DWORD
NTAPI
NtGdiD3dDrawPrimitives2(
  IN HANDLE hCmdBuf,
  IN HANDLE hVBuf,
  INOUT LPD3DNTHAL_DRAWPRIMITIVES2DATA pded,
  INOUT PFLATPTR pfpVidMemCmd,
  INOUT PDWORD pdwSizeCmd,
  INOUT PFLATPTR pfpVidMemVtx,
  INOUT PDWORD pdwSizeVtx
);

W32KAPI
DWORD
NTAPI
NtGdiDdGetDriverState(
  INOUT PDD_GETDRIVERSTATEDATA pdata
);

W32KAPI
DWORD
NTAPI
NtGdiDdCreateSurfaceEx(
  IN HANDLE hDirectDraw,
  IN HANDLE hSurface,
  IN DWORD dwSurfaceHandle
);

W32KAPI
DWORD
NTAPI
NtGdiDvpCanCreateVideoPort(
  IN HANDLE hDirectDraw,
  INOUT PDD_CANCREATEVPORTDATA puCanCreateVPortData
);

W32KAPI
DWORD
NTAPI
NtGdiDvpColorControl(
  IN HANDLE hVideoPort,
  INOUT PDD_VPORTCOLORDATA puVPortColorData
);

W32KAPI
HANDLE
NTAPI
NtGdiDvpCreateVideoPort(
  IN HANDLE hDirectDraw,
  INOUT PDD_CREATEVPORTDATA puCreateVPortData
);

W32KAPI
DWORD
NTAPI
NtGdiDvpDestroyVideoPort(
  IN HANDLE hVideoPort,
  INOUT PDD_DESTROYVPORTDATA puDestroyVPortData
);

W32KAPI
DWORD
NTAPI
NtGdiDvpFlipVideoPort(
  IN HANDLE hVideoPort,
  IN HANDLE hDDSurfaceCurrent,
  IN HANDLE hDDSurfaceTarget,
  INOUT PDD_FLIPVPORTDATA puFlipVPortData
);

W32KAPI
DWORD
NTAPI
NtGdiDvpGetVideoPortBandwidth(
  IN HANDLE hVideoPort,
  INOUT PDD_GETVPORTBANDWIDTHDATA puGetVPortBandwidthData
);

W32KAPI
DWORD
NTAPI
NtGdiDvpGetVideoPortField(
  IN HANDLE hVideoPort,
  INOUT PDD_GETVPORTFIELDDATA puGetVPortFieldData
);

W32KAPI
DWORD
NTAPI
NtGdiDvpGetVideoPortFlipStatus(
  IN HANDLE hDirectDraw,
  INOUT PDD_GETVPORTFLIPSTATUSDATA puGetVPortFlipStatusData
);

W32KAPI
DWORD
NTAPI
NtGdiDvpGetVideoPortInputFormats(
  IN HANDLE hVideoPort,
  INOUT PDD_GETVPORTINPUTFORMATDATA puGetVPortInputFormatData
);

W32KAPI
DWORD
NTAPI
NtGdiDvpGetVideoPortLine(
  IN HANDLE hVideoPort,
  INOUT PDD_GETVPORTLINEDATA puGetVPortLineData
);

W32KAPI
DWORD
NTAPI
NtGdiDvpGetVideoPortOutputFormats(
  IN HANDLE hVideoPort,
  INOUT PDD_GETVPORTOUTPUTFORMATDATA puGetVPortOutputFormatData
);

W32KAPI
DWORD
NTAPI
NtGdiDvpGetVideoPortConnectInfo(
  IN HANDLE hDirectDraw,
  INOUT PDD_GETVPORTCONNECTDATA puGetVPortConnectData
);

W32KAPI
DWORD
NTAPI
NtGdiDvpGetVideoSignalStatus(
  IN HANDLE hVideoPort,
  INOUT PDD_GETVPORTSIGNALDATA puGetVPortSignalData
);

W32KAPI
DWORD
NTAPI
NtGdiDvpUpdateVideoPort(
  IN HANDLE hVideoPort,
  IN PHANDLE phSurfaceVideo,
  IN PHANDLE phSurfaceVbi,
  INOUT PDD_UPDATEVPORTDATA puUpdateVPortData
);

W32KAPI
DWORD
NTAPI
NtGdiDvpWaitForVideoPortSync(
  IN HANDLE hVideoPort,
  INOUT PDD_WAITFORVPORTSYNCDATA puWaitForVPortSyncData
);

W32KAPI
DWORD
NTAPI
NtGdiDvpAcquireNotification(
  IN HANDLE hVideoPort,
  INOUT PHANDLE hEvent,
  IN LPDDVIDEOPORTNOTIFY pNotify
);

W32KAPI
DWORD
NTAPI
NtGdiDvpReleaseNotification(
  IN HANDLE hVideoPort,
  IN HANDLE hEvent
);

W32KAPI
DWORD
NTAPI
NtGdiDdGetMoCompGuids(
  IN HANDLE hDirectDraw,
  INOUT PDD_GETMOCOMPGUIDSDATA puGetMoCompGuidsData
);

W32KAPI
DWORD
NTAPI
NtGdiDdGetMoCompFormats(
  IN HANDLE hDirectDraw,
  INOUT PDD_GETMOCOMPFORMATSDATA puGetMoCompFormatsData
);

W32KAPI
DWORD
NTAPI
NtGdiDdGetMoCompBuffInfo(
  IN HANDLE hDirectDraw,
  INOUT PDD_GETMOCOMPCOMPBUFFDATA puGetBuffData
);

W32KAPI
DWORD
NTAPI
NtGdiDdGetInternalMoCompInfo(
  IN HANDLE hDirectDraw,
  INOUT PDD_GETINTERNALMOCOMPDATA puGetInternalData
);

W32KAPI
HANDLE
NTAPI
NtGdiDdCreateMoComp(
  IN HANDLE hDirectDraw,
  INOUT PDD_CREATEMOCOMPDATA puCreateMoCompData
);

W32KAPI
DWORD
NTAPI
NtGdiDdDestroyMoComp(
  IN HANDLE hMoComp,
  INOUT PDD_DESTROYMOCOMPDATA puDestroyMoCompData
);

W32KAPI
DWORD
NTAPI
NtGdiDdBeginMoCompFrame(
  IN HANDLE hMoComp,
  INOUT PDD_BEGINMOCOMPFRAMEDATA puBeginFrameData
);

W32KAPI
DWORD
NTAPI
NtGdiDdEndMoCompFrame(
  IN HANDLE hMoComp,
  INOUT PDD_ENDMOCOMPFRAMEDATA puEndFrameData
);

W32KAPI
DWORD
NTAPI
NtGdiDdRenderMoComp(
  IN HANDLE hMoComp,
  INOUT PDD_RENDERMOCOMPDATA puRenderMoCompData
);

W32KAPI
DWORD
NTAPI
NtGdiDdQueryMoCompStatus(
  IN HANDLE hMoComp,
  INOUT PDD_QUERYMOCOMPSTATUSDATA puQueryMoCompStatusData
);

W32KAPI
DWORD
NTAPI
NtGdiDdAlphaBlt(
  IN HANDLE hSurfaceDest,
  IN OPTIONAL HANDLE hSurfaceSrc,
  INOUT PDD_BLTDATA puBltData
);

W32KAPI
BOOL
NTAPI
NtGdiAlphaBlend(
  IN HDC hdcDst,
  IN LONG DstX,
  IN LONG DstY,
  IN LONG DstCx,
  IN LONG DstCy,
  IN HDC hdcSrc,
  IN LONG SrcX,
  IN LONG SrcY,
  IN LONG SrcCx,
  IN LONG SrcCy,
  IN BLENDFUNCTION BlendFunction,
  IN HANDLE hcmXform
);

W32KAPI
BOOL
NTAPI
NtGdiGradientFill(
  IN HDC hdc,
  IN PTRIVERTEX pVertex,
  IN ULONG nVertex,
  IN PVOID pMesh,
  IN ULONG nMesh,
  IN ULONG ulMode
);

W32KAPI
BOOL
NTAPI
NtGdiSetIcmMode(
  IN HDC hdc,
  IN ULONG nCommand,
  IN ULONG ulMode
);

W32KAPI
HANDLE
NTAPI
NtGdiCreateColorSpace(
  IN PLOGCOLORSPACEEXW pLogColorSpace
);

W32KAPI
BOOL
NTAPI
NtGdiDeleteColorSpace(
  IN HANDLE hColorSpace
);

W32KAPI
BOOL
NTAPI
NtGdiSetColorSpace(
  IN HDC hdc,
  IN HCOLORSPACE hColorSpace
);

W32KAPI
HANDLE
NTAPI
NtGdiCreateColorTransform(
  IN HDC hdc,
  IN LPLOGCOLORSPACEW pLogColorSpaceW,
  IN OPTIONAL PVOID pvSrcProfile,
  IN ULONG cjSrcProfile,
  IN OPTIONAL PVOID pvDestProfile,
  IN ULONG cjDestProfile,
  IN OPTIONAL PVOID pvTargetProfile,
  IN ULONG cjTargetProfile
);

W32KAPI
BOOL
NTAPI
NtGdiDeleteColorTransform(
  IN HDC hdc,
  IN HANDLE hColorTransform
);

W32KAPI
BOOL
NTAPI
NtGdiCheckBitmapBits(
  IN HDC hdc,
  IN HANDLE hColorTransform,
  IN PVOID pvBits,
  IN ULONG bmFormat,
  IN DWORD dwWidth,
  IN DWORD dwHeight,
  IN DWORD dwStride,
  OUT PBYTE paResults
);

W32KAPI
ULONG
NTAPI
NtGdiColorCorrectPalette(
  IN HDC hdc,
  IN HPALETTE hpal,
  IN ULONG FirstEntry,
  IN ULONG NumberOfEntries,
  INOUT PPALETTEENTRY ppalEntry,
  IN ULONG Command
);

W32KAPI
ULONG_PTR
NTAPI
NtGdiGetColorSpaceforBitmap(
  IN HBITMAP hsurf
);

W32KAPI
BOOL
NTAPI
NtGdiGetDeviceGammaRamp(
  IN HDC hdc,
  OUT LPVOID lpGammaRamp
);

W32KAPI
BOOL
NTAPI
NtGdiSetDeviceGammaRamp(
  IN HDC hdc,
  IN LPVOID lpGammaRamp
);

W32KAPI
BOOL
NTAPI
NtGdiIcmBrushInfo(
  IN HDC hdc,
  IN HBRUSH hbrush,
  INOUT PBITMAPINFO pbmiDIB,
  INOUT PVOID pvBits,
  INOUT ULONG *pulBits,
  OUT OPTIONAL DWORD *piUsage,
  OUT OPTIONAL BOOL *pbAlreadyTran,
  IN ULONG Command
);

W32KAPI
VOID
NTAPI
NtGdiFlush(
  VOID);

W32KAPI
HDC
NTAPI
NtGdiCreateMetafileDC(
  IN HDC hdc
);

W32KAPI
BOOL
NTAPI
NtGdiMakeInfoDC(
  IN HDC hdc,
  IN BOOL bSet
);

W32KAPI
HANDLE
NTAPI
NtGdiCreateClientObj(
  IN ULONG ulType
);

W32KAPI
BOOL
NTAPI
NtGdiDeleteClientObj(
  IN HANDLE h
);

W32KAPI
LONG
NTAPI
NtGdiGetBitmapBits(
  IN HBITMAP hbm,
  IN ULONG cjMax,
  OUT OPTIONAL PBYTE pjOut
);

W32KAPI
BOOL
NTAPI
NtGdiDeleteObjectApp(
  IN HANDLE hobj
);

W32KAPI
INT
NTAPI
NtGdiGetPath(
  IN HDC hdc,
  OUT OPTIONAL LPPOINT pptlBuf,
  OUT OPTIONAL LPBYTE pjTypes,
  IN INT cptBuf
);

W32KAPI
HDC
NTAPI
NtGdiCreateCompatibleDC(
  IN HDC hdc
);

W32KAPI
HBITMAP
NTAPI
NtGdiCreateDIBitmapInternal(
  IN HDC hdc,
  IN INT cx,
  IN INT cy,
  IN DWORD fInit,
  IN OPTIONAL LPBYTE pjInit,
  IN OPTIONAL LPBITMAPINFO pbmi,
  IN DWORD iUsage,
  IN UINT cjMaxInitInfo,
  IN UINT cjMaxBits,
  IN FLONG f,
  IN HANDLE hcmXform
);

W32KAPI
HBITMAP
NTAPI
NtGdiCreateDIBSection(
  IN HDC hdc,
  IN OPTIONAL HANDLE hSectionApp,
  IN DWORD dwOffset,
  IN LPBITMAPINFO pbmi,
  IN DWORD iUsage,
  IN UINT cjHeader,
  IN FLONG fl,
  IN ULONG_PTR dwColorSpace,
  OUT PPVOID ppvBits
);

W32KAPI
HBRUSH
NTAPI
NtGdiCreateSolidBrush(
  IN COLORREF cr,
  IN OPTIONAL HBRUSH hbr
);

W32KAPI
HBRUSH
NTAPI
NtGdiCreateDIBBrush(
  IN PVOID pv,
  IN FLONG fl,
  IN UINT cj,
  IN BOOL b8X8,
  IN BOOL bPen,
  IN PVOID pClient
);

W32KAPI
HBRUSH
NTAPI
NtGdiCreatePatternBrushInternal(
  IN HBITMAP hbm,
  IN BOOL bPen,
  IN BOOL b8X8
);

W32KAPI
HBRUSH
NTAPI
NtGdiCreateHatchBrushInternal(
  IN ULONG ulStyle,
  IN COLORREF clrr,
  IN BOOL bPen
);

W32KAPI
HPEN
NTAPI
NtGdiExtCreatePen(
  IN ULONG flPenStyle,
  IN ULONG ulWidth,
  IN ULONG iBrushStyle,
  IN ULONG ulColor,
  IN ULONG_PTR lClientHatch,
  IN ULONG_PTR lHatch,
  IN ULONG cstyle,
  IN OPTIONAL PULONG pulStyle,
  IN ULONG cjDIB,
  IN BOOL bOldStylePen,
  IN OPTIONAL HBRUSH hbrush
);

W32KAPI
HRGN
NTAPI
NtGdiCreateEllipticRgn(
  IN INT xLeft,
  IN INT yTop,
  IN INT xRight,
  IN INT yBottom
);

W32KAPI
HRGN
NTAPI
NtGdiCreateRoundRectRgn(
  IN INT xLeft,
  IN INT yTop,
  IN INT xRight,
  IN INT yBottom,
  IN INT xWidth,
  IN INT yHeight
);

W32KAPI
HANDLE
NTAPI
NtGdiCreateServerMetaFile(
  IN DWORD iType,
  IN ULONG cjData,
  IN LPBYTE pjData,
  IN DWORD mm,
  IN DWORD xExt,
  IN DWORD yExt
);

W32KAPI
HRGN
NTAPI
NtGdiExtCreateRegion(
  IN OPTIONAL LPXFORM px,
  IN DWORD cj,
  IN LPRGNDATA prgn
);

W32KAPI
ULONG
NTAPI
NtGdiMakeFontDir(
  IN FLONG flEmbed,
  OUT PBYTE pjFontDir,
  IN unsigned cjFontDir,
  IN LPWSTR pwszPathname,
  IN unsigned cjPathname
);

W32KAPI
BOOL
NTAPI
NtGdiPolyDraw(
  IN HDC hdc,
  IN LPPOINT ppt,
  IN LPBYTE pjAttr,
  IN ULONG cpt
);

W32KAPI
BOOL
NTAPI
NtGdiPolyTextOutW(
  IN HDC hdc,
  IN POLYTEXTW *pptw,
  IN UINT cStr,
  IN DWORD dwCodePage
);

W32KAPI
ULONG
NTAPI
NtGdiGetServerMetaFileBits(
  IN HANDLE hmo,
  IN ULONG cjData,
  OUT OPTIONAL LPBYTE pjData,
  OUT PDWORD piType,
  OUT PDWORD pmm,
  OUT PDWORD pxExt,
  OUT PDWORD pyExt
);

W32KAPI
BOOL
NTAPI
NtGdiEqualRgn(
  IN HRGN hrgn1,
  IN HRGN hrgn2
);

W32KAPI
BOOL
NTAPI
NtGdiGetBitmapDimension(
  IN HBITMAP hbm,
  OUT LPSIZE psize
);

W32KAPI
UINT
NTAPI
NtGdiGetNearestPaletteIndex(
  IN HPALETTE hpal,
  IN COLORREF crColor
);

W32KAPI
BOOL
NTAPI
NtGdiPtVisible(
  IN HDC hdc,
  IN INT x,
  IN INT y
);

W32KAPI
BOOL
NTAPI
NtGdiRectVisible(
  IN HDC hdc,
  IN LPRECT prc
);

W32KAPI
BOOL
NTAPI
NtGdiRemoveFontResourceW(
  IN WCHAR *pwszFiles,
  IN ULONG cwc,
  IN ULONG cFiles,
  IN ULONG fl,
  IN DWORD dwPidTid,
  IN OPTIONAL DESIGNVECTOR *pdv
);

W32KAPI
BOOL
NTAPI
NtGdiResizePalette(
  IN HPALETTE hpal,
  IN UINT cEntry
);

W32KAPI
BOOL
NTAPI
NtGdiSetBitmapDimension(
  IN HBITMAP hbm,
  IN INT cx,
  IN INT cy,
  OUT OPTIONAL LPSIZE psizeOut
);

W32KAPI
INT
NTAPI
NtGdiOffsetClipRgn(
  IN HDC hdc,
  IN INT x,
  IN INT y
);

W32KAPI
INT
NTAPI
NtGdiSetMetaRgn(
  IN HDC hdc
);

W32KAPI
BOOL
NTAPI
NtGdiSetTextJustification(
  IN HDC hdc,
  IN INT lBreakExtra,
  IN INT cBreak
);

W32KAPI
INT
NTAPI
NtGdiGetAppClipBox(
  IN HDC hdc,
  OUT LPRECT prc
);

W32KAPI
BOOL
NTAPI
NtGdiGetTextExtentExW(
  IN HDC hdc,
  IN OPTIONAL LPWSTR lpwsz,
  IN ULONG cwc,
  IN ULONG dxMax,
  OUT OPTIONAL PULONG pcCh,
  OUT OPTIONAL PULONG pdxOut,
  OUT LPSIZE psize,
  IN FLONG fl
);

W32KAPI
BOOL
NTAPI
NtGdiGetCharABCWidthsW(
  IN HDC hdc,
  IN UINT wchFirst,
  IN ULONG cwch,
  IN OPTIONAL PWCHAR pwch,
  IN FLONG fl,
  OUT PVOID pvBuf
);

W32KAPI
DWORD
NTAPI
NtGdiGetCharacterPlacementW(
  IN HDC hdc,
  IN LPWSTR pwsz,
  IN INT nCount,
  IN INT nMaxExtent,
  INOUT LPGCP_RESULTSW pgcpw,
  IN DWORD dwFlags
);

W32KAPI
BOOL
NTAPI
NtGdiAngleArc(
  IN HDC hdc,
  IN INT x,
  IN INT y,
  IN DWORD dwRadius,
  IN DWORD dwStartAngle,
  IN DWORD dwSweepAngle
);

W32KAPI
BOOL
NTAPI
NtGdiBeginPath(
  IN HDC hdc
);

W32KAPI
BOOL
NTAPI
NtGdiSelectClipPath(
  IN HDC hdc,
  IN INT iMode
);

W32KAPI
BOOL
NTAPI
NtGdiCloseFigure(
  IN HDC hdc
);

W32KAPI
BOOL
NTAPI
NtGdiEndPath(
  IN HDC hdc
);

W32KAPI
BOOL
NTAPI
NtGdiAbortPath(
  IN HDC hdc
);

W32KAPI
BOOL
NTAPI
NtGdiFillPath(
  IN HDC hdc
);

W32KAPI
BOOL
NTAPI
NtGdiStrokeAndFillPath(
  IN HDC hdc
);

W32KAPI
BOOL
NTAPI
NtGdiStrokePath(
  IN HDC hdc
);

W32KAPI
BOOL
NTAPI
NtGdiWidenPath(
  IN HDC hdc
);

W32KAPI
BOOL
NTAPI
NtGdiFlattenPath(
  IN HDC hdc
);

W32KAPI
NTSTATUS
NTAPI
NtGdiFlushUserBatch(
  VOID);

W32KAPI
HRGN
NTAPI
NtGdiPathToRegion(
  IN HDC hdc
);

W32KAPI
BOOL
NTAPI
NtGdiSetMiterLimit(
  IN HDC hdc,
  IN DWORD dwNew,
  INOUT OPTIONAL PDWORD pdwOut
);

W32KAPI
BOOL
NTAPI
NtGdiSetFontXform(
  IN HDC hdc,
  IN DWORD dwxScale,
  IN DWORD dwyScale
);

W32KAPI
BOOL
NTAPI
NtGdiGetMiterLimit(
  IN HDC hdc,
  OUT PDWORD pdwOut
);

W32KAPI
BOOL
NTAPI
NtGdiEllipse(
  IN HDC hdc,
  IN INT xLeft,
  IN INT yTop,
  IN INT xRight,
  IN INT yBottom
);

W32KAPI
BOOL
NTAPI
NtGdiRectangle(
  IN HDC hdc,
  IN INT xLeft,
  IN INT yTop,
  IN INT xRight,
  IN INT yBottom
);

W32KAPI
BOOL
NTAPI
NtGdiRoundRect(
  IN HDC hdc,
  IN INT x1,
  IN INT y1,
  IN INT x2,
  IN INT y2,
  IN INT x3,
  IN INT y3
);

W32KAPI
BOOL
NTAPI
NtGdiPlgBlt(
  IN HDC hdcTrg,
  IN LPPOINT pptlTrg,
  IN HDC hdcSrc,
  IN INT xSrc,
  IN INT ySrc,
  IN INT cxSrc,
  IN INT cySrc,
  IN HBITMAP hbmMask,
  IN INT xMask,
  IN INT yMask,
  IN DWORD crBackColor
);

W32KAPI
BOOL
NTAPI
NtGdiMaskBlt(
  IN HDC hdc,
  IN INT xDst,
  IN INT yDst,
  IN INT cx,
  IN INT cy,
  IN HDC hdcSrc,
  IN INT xSrc,
  IN INT ySrc,
  IN HBITMAP hbmMask,
  IN INT xMask,
  IN INT yMask,
  IN DWORD dwRop4,
  IN DWORD crBackColor
);

W32KAPI
BOOL
NTAPI
NtGdiExtFloodFill(
  IN HDC hdc,
  IN INT x,
  IN INT y,
  IN COLORREF crColor,
  IN UINT iFillType
);

W32KAPI
BOOL
NTAPI
NtGdiFillRgn(
  IN HDC hdc,
  IN HRGN hrgn,
  IN HBRUSH hbrush
);

W32KAPI
BOOL
NTAPI
NtGdiFrameRgn(
  IN HDC hdc,
  IN HRGN hrgn,
  IN HBRUSH hbrush,
  IN INT xWidth,
  IN INT yHeight
);

W32KAPI
COLORREF
NTAPI
NtGdiSetPixel(
  IN HDC hdcDst,
  IN INT x,
  IN INT y,
  IN COLORREF crColor
);

W32KAPI
DWORD
NTAPI
NtGdiGetPixel(
  IN HDC hdc,
  IN INT x,
  IN INT y
);

W32KAPI
BOOL
NTAPI
NtGdiStartPage(
  IN HDC hdc
);

W32KAPI
BOOL
NTAPI
NtGdiEndPage(
  IN HDC hdc
);

W32KAPI
INT
NTAPI
NtGdiStartDoc(
  IN HDC hdc,
  IN PDOCINFOW pdi,
  OUT PBOOL pbBanding,
  IN INT iJob
);

W32KAPI
BOOL
NTAPI
NtGdiEndDoc(
  IN HDC hdc
);

W32KAPI
BOOL
NTAPI
NtGdiAbortDoc(
  IN HDC hdc
);

W32KAPI
BOOL
NTAPI
NtGdiUpdateColors(
  IN HDC hdc
);

W32KAPI
BOOL
NTAPI
NtGdiGetCharWidthW(
  IN HDC hdc,
  IN UINT wcFirst,
  IN UINT cwc,
  IN OPTIONAL PWCHAR pwc,
  IN FLONG fl,
  OUT PVOID pvBuf
);

W32KAPI
BOOL
NTAPI
NtGdiGetCharWidthInfo(
  IN HDC hdc,
  OUT PCHWIDTHINFO pChWidthInfo
);

W32KAPI
INT
NTAPI
NtGdiDrawEscape(
  IN HDC hdc,
  IN INT iEsc,
  IN INT cjIn,
  IN OPTIONAL LPSTR pjIn
);

W32KAPI
INT
NTAPI
NtGdiExtEscape(
  IN HDC hdc,
  IN OPTIONAL PWCHAR pDriver,
  IN INT nDriver,
  IN INT iEsc,
  IN INT cjIn,
  IN OPTIONAL LPSTR pjIn,
  IN INT cjOut,
  OUT OPTIONAL LPSTR pjOut
);

W32KAPI
ULONG
NTAPI
NtGdiGetFontData(
  IN HDC hdc,
  IN DWORD dwTable,
  IN DWORD dwOffset,
  OUT OPTIONAL PVOID pvBuf,
  IN ULONG cjBuf
);

W32KAPI
ULONG
NTAPI
NtGdiGetGlyphOutline(
  IN HDC hdc,
  IN WCHAR wch,
  IN UINT iFormat,
  OUT LPGLYPHMETRICS pgm,
  IN ULONG cjBuf,
  OUT OPTIONAL PVOID pvBuf,
  IN LPMAT2 pmat2,
  IN BOOL bIgnoreRotation
);

W32KAPI
BOOL
NTAPI
NtGdiGetETM(
  IN HDC hdc,
  OUT PEXTTEXTMETRIC petm
);

W32KAPI
BOOL
NTAPI
NtGdiGetRasterizerCaps(
  OUT LPRASTERIZER_STATUS praststat,
  IN ULONG cjBytes
);

W32KAPI
ULONG
NTAPI
NtGdiGetKerningPairs(
  IN HDC hdc,
  IN ULONG cPairs,
  OUT OPTIONAL PKERNINGPAIR pkpDst
);

W32KAPI
BOOL
NTAPI
NtGdiMonoBitmap(
  IN HBITMAP hbm
);

W32KAPI
HBITMAP
NTAPI
NtGdiGetObjectBitmapHandle(
  IN HBRUSH hbr,
  OUT PUINT piUsage
);

W32KAPI
ULONG
NTAPI
NtGdiEnumObjects(
  IN HDC hdc,
  IN INT iObjectType,
  IN ULONG cjBuf,
  OUT OPTIONAL PVOID pvBuf
);

// Note from SDK:
//
// NtGdiResetDC
// The exact size of the buffer at pdm is pdm->dmSize + pdm->dmDriverExtra.
// But this can't be specified with current annotation language.
//
// typedef struct _DRIVER_INFO_2W DRIVER_INFO_2W;
//
// :end note.
W32KAPI
BOOL
NTAPI
NtGdiResetDC(
  IN HDC hdc,
  IN LPDEVMODEW pdm,
  OUT PBOOL pbBanding,
  IN OPTIONAL PVOID pDriverInfo2,
  OUT PVOID ppUMdhpdev
);

W32KAPI
DWORD
NTAPI
NtGdiSetBoundsRect(
  IN HDC hdc,
  IN LPRECT prc,
  IN DWORD f
);

W32KAPI
BOOL
NTAPI
NtGdiGetColorAdjustment(
  IN HDC hdc,
  OUT PCOLORADJUSTMENT pcaOut
);

W32KAPI
BOOL
NTAPI
NtGdiSetColorAdjustment(
  IN HDC hdc,
  IN PCOLORADJUSTMENT pca
);

W32KAPI
BOOL
NTAPI
NtGdiCancelDC(
  IN HDC hdc
);

W32KAPI
HDC
NTAPI
NtGdiOpenDCW(
  IN OPTIONAL PUNICODE_STRING pustrDevice,
  IN PDEVMODEW pdm,
  IN PUNICODE_STRING pustrLogAddr,
  IN ULONG iType,
  IN OPTIONAL HANDLE hspool,
  IN OPTIONAL PVOID pDriverInfo2,
  OUT PVOID pUMdhpdev
);

W32KAPI
BOOL
NTAPI
NtGdiGetDCDword(
  IN HDC hdc,
  IN UINT u,
  OUT PDWORD Result
);

W32KAPI
BOOL
NTAPI
NtGdiGetDCPoint(
  IN HDC hdc,
  IN UINT iPoint,
  OUT PPOINTL pptOut
);

W32KAPI
BOOL
NTAPI
NtGdiScaleViewportExtEx(
  IN HDC hdc,
  IN INT xNum,
  IN INT xDenom,
  IN INT yNum,
  IN INT yDenom,
  OUT OPTIONAL LPSIZE pszOut
);

W32KAPI
BOOL
NTAPI
NtGdiScaleWindowExtEx(
  IN HDC hdc,
  IN INT xNum,
  IN INT xDenom,
  IN INT yNum,
  IN INT yDenom,
  OUT OPTIONAL LPSIZE pszOut
);

W32KAPI
BOOL
NTAPI
NtGdiSetVirtualResolution(
  IN HDC hdc,
  IN INT cxVirtualDevicePixel,
  IN INT cyVirtualDevicePixel,
  IN INT cxVirtualDeviceMm,
  IN INT cyVirtualDeviceMm
);

W32KAPI
BOOL
NTAPI
NtGdiSetSizeDevice(
  IN HDC hdc,
  IN INT cxVirtualDevice,
  IN INT cyVirtualDevice
);

W32KAPI
BOOL
NTAPI
NtGdiGetTransform(
  IN HDC hdc,
  IN DWORD iXform,
  OUT LPXFORM pxf
);

W32KAPI
BOOL
NTAPI
NtGdiModifyWorldTransform(
  IN HDC hdc,
  IN OPTIONAL LPXFORM pxf,
  IN DWORD iXform
);

W32KAPI
BOOL
NTAPI
NtGdiCombineTransform(
  OUT LPXFORM pxfDst,
  IN LPXFORM pxfSrc1,
  IN LPXFORM pxfSrc2
);

W32KAPI
BOOL
NTAPI
NtGdiTransformPoints(
  IN HDC hdc,
  IN PPOINT pptIn,
  OUT PPOINT pptOut,
  IN INT c,
  IN INT iMode
);

W32KAPI
LONG
NTAPI
NtGdiConvertMetafileRect(
  IN HDC hdc,
  INOUT PRECTL prect
);

W32KAPI
INT
NTAPI
NtGdiGetTextCharsetInfo(
  IN HDC hdc,
  OUT OPTIONAL LPFONTSIGNATURE lpSig,
  IN DWORD dwFlags
);

W32KAPI
BOOL
NTAPI
NtGdiDoBanding(
  IN HDC hdc,
  IN BOOL bStart,
  OUT PPOINTL pptl,
  OUT PSIZE pSize
);

W32KAPI
ULONG
NTAPI
NtGdiGetPerBandInfo(
  IN HDC hdc,
  INOUT PPERBANDINFO ppbi
);

W32KAPI
NTSTATUS
NTAPI
NtGdiGetStats(
  IN HANDLE hProcess,
  IN INT iIndex,
  IN INT iPidType,
  OUT PVOID pResults,
  IN UINT cjResultSize
);

W32KAPI
BOOL
NTAPI
NtGdiSetMagicColors(
  IN HDC hdc,
  IN PALETTEENTRY peMagic,
  IN ULONG Index
);

W32KAPI
HBRUSH
NTAPI
NtGdiSelectBrush(
  IN HDC hdc,
  IN HBRUSH hbrush
);

W32KAPI
HPEN
NTAPI
NtGdiSelectPen(
  IN HDC hdc,
  IN HPEN hpen
);

W32KAPI
HBITMAP
NTAPI
NtGdiSelectBitmap(
  IN HDC hdc,
  IN HBITMAP hbm
);

W32KAPI
HFONT
NTAPI
NtGdiSelectFont(
  IN HDC hdc,
  IN HFONT hf
);

W32KAPI
INT
NTAPI
NtGdiExtSelectClipRgn(
  IN HDC hdc,
  IN HRGN hrgn,
  IN INT iMode
);

W32KAPI
HPEN
NTAPI
NtGdiCreatePen(
  IN INT iPenStyle,
  IN INT iPenWidth,
  IN COLORREF cr,
  IN HBRUSH hbr
);

#ifdef _WINDOWBLT_NOTIFICATION_
W32KAPI
BOOL
NTAPI
NtGdiBitBlt(
  IN HDC hdcDst,
  IN INT x,
  IN INT y,
  IN INT cx,
  IN INT cy,
  IN HDC hdcSrc,
  IN INT xSrc,
  IN INT ySrc,
  IN DWORD rop4,
  IN DWORD crBackColor,
  IN FLONG fl
);
#else
W32KAPI
BOOL
NTAPI
NtGdiBitBlt(
  IN HDC hdcDst,
  IN INT x,
  IN INT y,
  IN INT cx,
  IN INT cy,
  IN HDC hdcSrc,
  IN INT xSrc,
  IN INT ySrc,
  IN DWORD rop4,
  IN DWORD crBackColor
);
#endif

W32KAPI
BOOL
NTAPI
NtGdiTileBitBlt(
  IN HDC hdcDst,
  IN RECTL * prectDst,
  IN HDC hdcSrc,
  IN RECTL * prectSrc,
  IN POINTL * pptlOrigin,
  IN DWORD rop4,
  IN DWORD crBackColor
);

W32KAPI
BOOL
NTAPI
NtGdiTransparentBlt(
  IN HDC hdcDst,
  IN INT xDst,
  IN INT yDst,
  IN INT cxDst,
  IN INT cyDst,
  IN HDC hdcSrc,
  IN INT xSrc,
  IN INT ySrc,
  IN INT cxSrc,
  IN INT cySrc,
  IN COLORREF TransColor
);

W32KAPI
BOOL
NTAPI
NtGdiGetTextExtent(
  IN HDC hdc,
  IN LPWSTR lpwsz,
  IN INT cwc,
  OUT LPSIZE psize,
  IN UINT flOpts
);

W32KAPI
BOOL
NTAPI
NtGdiGetTextMetricsW(
  IN HDC hdc,
  OUT PTMW_INTERNAL ptm,
  IN ULONG cj
);

W32KAPI
INT
NTAPI
NtGdiGetTextFaceW(
  IN HDC hdc,
  IN INT cChar,
  OUT OPTIONAL LPWSTR pszOut,
  IN BOOL bAliasName
);

W32KAPI
INT
NTAPI
NtGdiGetRandomRgn(
  IN HDC hdc,
  IN HRGN hrgn,
  IN INT iRgn
);

W32KAPI
BOOL
NTAPI
NtGdiExtTextOutW(
  IN HDC hdc,
  IN INT x,
  IN INT y,
  IN UINT flOpts,
  IN OPTIONAL LPRECT prcl,
  IN LPWSTR pwsz,
  IN INT cwc,
  IN OPTIONAL LPINT pdx,
  IN DWORD dwCodePage
);

W32KAPI
INT
NTAPI
NtGdiIntersectClipRect(
  IN HDC hdc,
  IN INT xLeft,
  IN INT yTop,
  IN INT xRight,
  IN INT yBottom
);

W32KAPI
HRGN
NTAPI
NtGdiCreateRectRgn(
  IN INT xLeft,
  IN INT yTop,
  IN INT xRight,
  IN INT yBottom
);

W32KAPI
BOOL
NTAPI
NtGdiPatBlt(
  IN HDC hdcDst,
  IN INT x,
  IN INT y,
  IN INT cx,
  IN INT cy,
  IN DWORD rop4
);

W32KAPI
BOOL
NTAPI
NtGdiPolyPatBlt(
  IN HDC hdc,
  IN DWORD rop4,
  IN PPOLYPATBLT pPoly,
  IN DWORD Count,
  IN DWORD Mode
);

W32KAPI
BOOL
NTAPI
NtGdiUnrealizeObject(
  IN HANDLE h
);

W32KAPI
HANDLE
NTAPI
NtGdiGetStockObject(
  IN INT iObject
);

W32KAPI
HBITMAP
NTAPI
NtGdiCreateCompatibleBitmap(
  IN HDC hdc,
  IN INT cx,
  IN INT cy
);

W32KAPI
BOOL
NTAPI
NtGdiLineTo(
  IN HDC hdc,
  IN INT x,
  IN INT y
);

W32KAPI
BOOL
NTAPI
NtGdiMoveTo(
  IN HDC hdc,
  IN INT x,
  IN INT y,
  OUT OPTIONAL LPPOINT pptOut
);

W32KAPI
INT
NTAPI
NtGdiExtGetObjectW(
  IN HANDLE h,
  IN INT cj,
  OUT OPTIONAL LPVOID pvOut
);

W32KAPI
INT
NTAPI
NtGdiGetDeviceCaps(
  IN HDC hdc,
  IN INT i
);

W32KAPI
BOOL
NTAPI
NtGdiGetDeviceCapsAll(
  IN HDC hdc,
  OUT PDEVCAPS pDevCaps
);

W32KAPI
BOOL
NTAPI
NtGdiStretchBlt(
  IN HDC hdcDst,
  IN INT xDst,
  IN INT yDst,
  IN INT cxDst,
  IN INT cyDst,
  IN HDC hdcSrc,
  IN INT xSrc,
  IN INT ySrc,
  IN INT cxSrc,
  IN INT cySrc,
  IN DWORD dwRop,
  IN DWORD dwBackColor
);

W32KAPI
BOOL
NTAPI
NtGdiSetBrushOrg(
  IN HDC hdc,
  IN INT x,
  IN INT y,
  OUT LPPOINT pptOut
);

W32KAPI
HBITMAP
NTAPI
NtGdiCreateBitmap(
  IN INT cx,
  IN INT cy,
  IN UINT cPlanes,
  IN UINT cBPP,
  IN OPTIONAL LPBYTE pjInit
);

W32KAPI
HPALETTE
NTAPI
NtGdiCreateHalftonePalette(
  IN HDC hdc
);

W32KAPI
BOOL
NTAPI
NtGdiRestoreDC(
  IN HDC hdc,
  IN INT iLevel
);

W32KAPI
INT
NTAPI
NtGdiExcludeClipRect(
  IN HDC hdc,
  IN INT xLeft,
  IN INT yTop,
  IN INT xRight,
  IN INT yBottom
);

W32KAPI
INT
NTAPI
NtGdiSaveDC(
  IN HDC hdc
);

W32KAPI
INT
NTAPI
NtGdiCombineRgn(
  IN HRGN hrgnDst,
  IN HRGN hrgnSrc1,
  IN HRGN hrgnSrc2,
  IN INT iMode
);

W32KAPI
BOOL
NTAPI
NtGdiSetRectRgn(
  IN HRGN hrgn,
  IN INT xLeft,
  IN INT yTop,
  IN INT xRight,
  IN INT yBottom
);

W32KAPI
LONG
NTAPI
NtGdiSetBitmapBits(
  IN HBITMAP hbm,
  IN ULONG cj,
  IN PBYTE pjInit
);

W32KAPI
INT
NTAPI
NtGdiGetDIBitsInternal(
  IN HDC hdc,
  IN HBITMAP hbm,
  IN UINT iStartScan,
  IN UINT cScans,
  OUT OPTIONAL LPBYTE pBits,
  INOUT LPBITMAPINFO pbmi,
  IN UINT iUsage,
  IN UINT cjMaxBits,
  IN UINT cjMaxInfo
);

W32KAPI
INT
NTAPI
NtGdiOffsetRgn(
  IN HRGN hrgn,
  IN INT cx,
  IN INT cy
);

W32KAPI
INT
NTAPI
NtGdiGetRandomRgn(
  IN HDC hDC,
  OUT HRGN hDest,
  IN INT iCode
);

W32KAPI
INT
NTAPI
NtGdiGetRgnBox(
  IN HRGN hrgn,
  OUT LPRECT prcOut
);

W32KAPI
BOOL
NTAPI
NtGdiRectInRegion(
  IN HRGN hrgn,
  INOUT LPRECT prcl
);

W32KAPI
DWORD
NTAPI
NtGdiGetBoundsRect(
  IN HDC hdc,
  OUT LPRECT prc,
  IN DWORD f
);

W32KAPI
BOOL
NTAPI
NtGdiPtInRegion(
  IN HRGN hrgn,
  IN INT x,
  IN INT y
);

W32KAPI
COLORREF
NTAPI
NtGdiGetNearestColor(
  IN HDC hdc,
  IN COLORREF cr
);

W32KAPI
UINT
NTAPI
NtGdiGetSystemPaletteUse(
  IN HDC hdc
);

W32KAPI
UINT
NTAPI
NtGdiSetSystemPaletteUse(
  IN HDC hdc,
  IN UINT ui
);

W32KAPI
DWORD
NTAPI
NtGdiGetRegionData(
  IN HRGN hrgn,
  IN DWORD nCount,
  OUT OPTIONAL LPRGNDATA lpRgnData
);

W32KAPI
BOOL
NTAPI
NtGdiInvertRgn(
  IN HDC hdc,
  IN HRGN hrgn
);

INT
W32KAPI
NTAPI
NtGdiAddFontResourceW(
  IN PWCHAR pwszFiles,
  IN ULONG cwc,
  IN ULONG cFiles,
  IN FLONG f,
  IN DWORD dwPidTid,
  IN OPTIONAL PDESIGNVECTOR pdv
);

//#if (_WIN32_WINNT >= 0x0500)
//W32KAPI
HFONT
NTAPI
NtGdiHfontCreate(
  IN PENUMLOGFONTEXDVW pelfw,
  IN ULONG cjElfw,
  IN LFTYPE lft,
  IN FLONG fl,
  IN PVOID pvCliData
);
//#else
//W32KAPI
//HFONT
//ntapi
//NtGdiHfontCreate(
//  IN LPEXTLOGFONTW pelfw,
//  IN ULONG cjElfw,
//  IN LFTYPE lft,
//  IN FLONG fl,
//  IN PVOID pvCliData
//);
//#endif

W32KAPI
ULONG
NTAPI
NtGdiSetFontEnumeration(
  IN ULONG ulType
);

W32KAPI
BOOL
NTAPI
NtGdiEnumFontClose(
  IN ULONG_PTR idEnum
);

#if (_WIN32_WINNT >= 0x0500)
W32KAPI
BOOL
NTAPI
NtGdiEnumFontChunk(
  IN HDC hdc,
  IN ULONG_PTR idEnum,
  IN ULONG cjEfdw,
  OUT PULONG pcjEfdw,
  OUT PENUMFONTDATAW pefdw
);
#endif

W32KAPI
ULONG_PTR
NTAPI
NtGdiEnumFontOpen(
  IN HDC hdc,
  IN ULONG iEnumType,
  IN FLONG flWin31Compat,
  IN ULONG cwchMax,
  IN OPTIONAL LPWSTR pwszFaceName,
  IN ULONG lfCharSet,
  OUT PULONG pulCount
);

W32KAPI
INT
NTAPI
NtGdiQueryFonts(
  OUT PUNIVERSAL_FONT_ID pufiFontList,
  IN ULONG nBufferSize,
  OUT PLARGE_INTEGER pTimeStamp
);

W32KAPI
BOOL
NTAPI
NtGdiConsoleTextOut(
  IN HDC hdc,
  IN PPOLYTEXTW lpto,
  IN UINT nStrings,
  IN PRECTL prclBounds
);

W32KAPI
NTSTATUS
NTAPI
NtGdiFullscreenControl(
  IN FULLSCREENCONTROL FullscreenCommand,
  IN PVOID FullscreenInput,
  IN DWORD FullscreenInputLength,
  OUT PVOID FullscreenOutput,
  INOUT PULONG FullscreenOutputLength
);

W32KAPI
DWORD
NtGdiGetCharSet(
  IN HDC hdc
);

W32KAPI
BOOL
NTAPI
NtGdiEnableEudc(
  IN BOOL
);

W32KAPI
BOOL
NTAPI
NtGdiEudcLoadUnloadLink(
  IN OPTIONAL LPCWSTR pBaseFaceName,
  IN UINT cwcBaseFaceName,
  IN LPCWSTR pEudcFontPath,
  IN UINT cwcEudcFontPath,
  IN INT iPriority,
  IN INT iFontLinkType,
  IN BOOL bLoadLin
);

W32KAPI
UINT
NTAPI
NtGdiGetStringBitmapW(
  IN HDC hdc,
  IN LPWSTR pwsz,
  IN UINT cwc,
  OUT PBYTE lpSB,
  IN UINT cj
);

W32KAPI
ULONG
NTAPI
NtGdiGetEudcTimeStampEx(
  IN OPTIONAL LPWSTR lpBaseFaceName,
  IN ULONG cwcBaseFaceName,
  IN BOOL bSystemTimeStamp
);

W32KAPI
ULONG
NTAPI
NtGdiQueryFontAssocInfo(
  IN HDC hdc
);

#if (_WIN32_WINNT >= 0x0500)
W32KAPI
DWORD
NtGdiGetFontUnicodeRanges(
  IN HDC hdc,
  OUT OPTIONAL LPGLYPHSET pgs
);
#endif

#ifdef LANGPACK
W32KAPI
BOOL
NtGdiGetRealizationInfo(
  IN HDC hdc,
  OUT PREALIZATION_INFO pri,
  IN HFONT hf
);
#endif

W32KAPI
BOOL
NtGdiAddRemoteMMInstanceToDC(
  IN HDC hdc,
  IN PDOWNLOADDESIGNVECTOR pddv,
  IN ULONG cjDDV
);

W32KAPI
BOOL
NTAPI
NtGdiUnloadPrinterDriver(
  IN LPWSTR pDriverName,
  IN ULONG cbDriverName
);

W32KAPI
BOOL
NTAPI
NtGdiEngAssociateSurface(
  IN HSURF hsurf,
  IN HDEV hdev,
  IN FLONG flHooks
);

W32KAPI
BOOL
NTAPI
NtGdiEngEraseSurface(
  IN PSURFOBJ pso,
  IN PRECTL prcl,
  IN ULONG iColor
);

W32KAPI
HBITMAP
NTAPI
NtGdiEngCreateBitmap(
  IN SIZEL sizl,
  IN LONG lWidth,
  IN ULONG iFormat,
  IN FLONG fl,
  IN OPTIONAL PVOID pvBits
);

W32KAPI
BOOL
NTAPI
NtGdiEngDeleteSurface(
  IN HSURF hsurf
);

W32KAPI
PSURFOBJ
NTAPI
NtGdiEngLockSurface(
  IN HSURF hsurf
);

W32KAPI
VOID
NTAPI
NtGdiEngUnlockSurface(
  IN PSURFOBJ
);

W32KAPI
BOOL
NTAPI
NtGdiEngMarkBandingSurface(
  IN HSURF hsurf
);

W32KAPI
HSURF
NTAPI
NtGdiEngCreateDeviceSurface(
  IN DHSURF dhsurf,
  IN SIZEL sizl,
  IN ULONG iFormatCompat
);

W32KAPI
HBITMAP
NTAPI
NtGdiEngCreateDeviceBitmap(
  IN DHSURF dhsurf,
  IN SIZEL sizl,
  IN ULONG iFormatCompat
);

W32KAPI
BOOL
NTAPI
NtGdiEngCopyBits(
  IN PSURFOBJ psoDst,
  IN PSURFOBJ psoSrc,
  IN OPTIONAL PCLIPOBJ pco,
  IN PXLATEOBJ pxlo,
  IN PRECTL prclDst,
  IN PPOINTL pptlSrc
);

W32KAPI
BOOL
NTAPI
NtGdiEngStretchBlt(
  IN PSURFOBJ psoDest,
  IN PSURFOBJ psoSrc,
  IN PSURFOBJ psoMask,
  IN PCLIPOBJ pco,
  IN PXLATEOBJ pxlo,
  IN PCOLORADJUSTMENT pca,
  IN PPOINTL pptlHTOrg,
  IN PRECTL prclDest,
  IN PRECTL prclSrc,
  IN PPOINTL pptlMask,
  IN PULONG iMode
);

W32KAPI
BOOL
NTAPI
NtGdiEngBitBlt(
  IN PSURFOBJ psoDst,
  IN PSURFOBJ psoSrc,
  IN PSURFOBJ psoMask,
  IN PCLIPOBJ pco,
  IN PXLATEOBJ pxlo,
  IN PRECTL prclDst,
  IN PPOINTL pptlSrc,
  IN PPOINTL pptlMask,
  IN PBRUSHOBJ pbo,
  IN PPOINTL pptlBrush,
  IN ROP4 rop4
);

W32KAPI
BOOL
NTAPI
NtGdiEngPlgBlt(
  IN PSURFOBJ psoTrg,
  IN PSURFOBJ psoSrc,
  IN OPTIONAL PSURFOBJ psoMsk,
  IN PCLIPOBJ pco,
  IN PXLATEOBJ pxlo,
  IN PCOLORADJUSTMENT pca,
  IN PPOINTL pptlBrushOrg,
  IN PPOINTFIX pptfxDest,
  IN PRECTL prclSrc,
  IN OPTIONAL PPOINTL pptlMask,
  IN ULONG iMode
);

W32KAPI
HPALETTE
NTAPI
NtGdiEngCreatePalette(
  IN ULONG iMode,
  IN ULONG cColors,
  IN PULONG pulColors,
  IN FLONG flRed,
  IN FLONG flGreen,
  IN FLONG flBlue
);

W32KAPI
BOOL
NTAPI
NtGdiEngDeletePalette(
  IN HPALETTE hPal
);

W32KAPI
BOOL
NTAPI
NtGdiEngStrokePath(
  IN PSURFOBJ pso,
  IN PPATHOBJ ppo,
  IN PCLIPOBJ pco,
  IN PXFORMOBJ pxo,
  IN PBRUSHOBJ pbo,
  IN PPOINTL pptlBrushOrg,
  IN PLINEATTRS plineattrs,
  IN MIX mix
);

W32KAPI
BOOL
NTAPI
NtGdiEngFillPath(
  IN PSURFOBJ pso,
  IN PPATHOBJ ppo,
  IN PCLIPOBJ pco,
  IN PBRUSHOBJ pbo,
  IN PPOINTL pptlBrushOrg,
  IN MIX mix,
  IN FLONG flOptions
);

W32KAPI
BOOL
NTAPI
NtGdiEngStrokeAndFillPath(
  IN PSURFOBJ pso,
  IN PPATHOBJ ppo,
  IN PCLIPOBJ pco,
  IN PXFORMOBJ pxo,
  IN PBRUSHOBJ pboStroke,
  IN PLINEATTRS plineattrs,
  IN PBRUSHOBJ pboFill,
  IN PPOINTL pptlBrushOrg,
  IN MIX mix,
  IN FLONG flOptions
);

W32KAPI
BOOL
NTAPI
NtGdiEngPaint(
  IN PSURFOBJ pso,
  IN PCLIPOBJ pco,
  IN PBRUSHOBJ pbo,
  IN PPOINTL pptlBrushOrg,
  IN MIX mix
);

W32KAPI
BOOL
NTAPI
NtGdiEngLineTo(
  IN PSURFOBJ pso,
  IN PCLIPOBJ pco,
  IN PBRUSHOBJ pbo,
  IN LONG x1,
  IN LONG y1,
  IN LONG x2,
  IN LONG y2,
  IN RECTL *prclBounds,
  IN MIX mix
);

W32KAPI
BOOL
NTAPI
NtGdiEngAlphaBlend(
  IN PSURFOBJ psoDest,
  IN PSURFOBJ psoSrc,
  IN PCLIPOBJ pco,
  IN PXLATEOBJ pxlo,
  IN PRECTL prclDest,
  IN PRECTL prclSrc,
  IN PBLENDOBJ pBlendObj
);

W32KAPI
BOOL
NTAPI
NtGdiEngGradientFill(
  IN PSURFOBJ psoDest,
  IN CLIPOBJ *pco,
  IN XLATEOBJ *pxlo,
  IN TRIVERTEX *pVertex,
  IN ULONG nVertex,
  IN PVOID pMesh,
  IN ULONG nMesh,
  IN RECTL *prclExtents,
  IN POINTL *pptlDitherOrg,
  IN ULONG ulMode
);

W32KAPI
BOOL
NTAPI
NtGdiEngTransparentBlt(
  IN SURFOBJ *psoDst,
  IN SURFOBJ *psoSrc,
  IN CLIPOBJ *pco,
  IN XLATEOBJ *pxlo,
  IN RECTL *prclDst,
  IN RECTL *prclSrc,
  IN ULONG iTransColor,
  IN ULONG ulReserved
);

W32KAPI
BOOL
NTAPI
NtGdiEngTextOut(
  IN SURFOBJ *pso,
  IN STROBJ *pstro,
  IN FONTOBJ *pfo,
  IN CLIPOBJ *pco,
  IN RECTL *prclExtra,
  IN RECTL *prclOpaque,
  IN BRUSHOBJ *pboFore,
  IN BRUSHOBJ *pboOpaque,
  IN POINTL *pptlOrg,
  IN MIX mix
);

W32KAPI
BOOL
NTAPI
NtGdiEngStretchBltROP(
  IN SURFOBJ *psoTrg,
  IN SURFOBJ *psoSrc,
  IN SURFOBJ *psoMask,
  IN CLIPOBJ *pco,
  IN XLATEOBJ *pxlo,
  IN COLORADJUSTMENT *pca,
  IN POINTL *pptlBrushOrg,
  IN RECTL *prclTrg,
  IN RECTL *prclSrc,
  IN POINTL *pptlMask,
  IN ULONG iMode,
  IN BRUSHOBJ *pbo,
  IN ROP4 rop4
);

W32KAPI
ULONG
NTAPI
NtGdiXLATEOBJ_cGetPalette(
  IN XLATEOBJ *pxlo,
  IN ULONG iPal,
  IN ULONG cPal,
  OUT ULONG *pPal
);

W32KAPI
ULONG
NTAPI
NtGdiCLIPOBJ_cEnumStart(
  IN CLIPOBJ *pco,
  IN BOOL bAll,
  IN ULONG iType,
  IN ULONG iDirection,
  IN ULONG cLimit
);

W32KAPI
BOOL
NTAPI
NtGdiCLIPOBJ_bEnum(
  IN CLIPOBJ *pco,
  IN ULONG cj,
  OUT ULONG *pul
);

W32KAPI
PATHOBJ*
NTAPI
NtGdiCLIPOBJ_ppoGetPath(
  IN CLIPOBJ *pco
);

W32KAPI
CLIPOBJ*
NTAPI
NtGdiEngCreateClip(
  VOID);

W32KAPI
VOID
NTAPI
NtGdiEngDeleteClip(
  IN CLIPOBJ *pco
);

W32KAPI
PVOID
NTAPI
NtGdiBRUSHOBJ_pvAllocRbrush(
  IN BRUSHOBJ *pbo,
  IN ULONG cj
);

W32KAPI
PVOID
NTAPI
NtGdiBRUSHOBJ_pvGetRbrush(
  IN BRUSHOBJ *pbo
);

W32KAPI
ULONG
NTAPI
NtGdiBRUSHOBJ_ulGetBrushColor(
  IN BRUSHOBJ *pbo
);

W32KAPI
HANDLE
NTAPI
NtGdiBRUSHOBJ_hGetColorTransform(
  IN BRUSHOBJ *pbo
);

W32KAPI
BOOL
NTAPI
NtGdiXFORMOBJ_bApplyXform(
  IN XFORMOBJ *pxo,
  IN ULONG iMode,
  IN ULONG cPoints,
  IN PVOID pvIn,
  OUT PVOID pvOut
);

W32KAPI
ULONG
NTAPI
NtGdiXFORMOBJ_iGetXform(
  IN XFORMOBJ *pxo,
  OUT OPTIONAL XFORML *pxform
);

W32KAPI
VOID
NTAPI
NtGdiFONTOBJ_vGetInfo(
  IN FONTOBJ *pfo,
  IN ULONG cjSize,
  OUT FONTINFO *pfi
);

W32KAPI
ULONG
NTAPI
NtGdiFONTOBJ_cGetGlyphs(
  IN FONTOBJ *pfo,
  IN ULONG iMode,
  IN ULONG cGlyph,
  IN HGLYPH *phg,
  OUT PVOID *ppvGlyph
);

W32KAPI
XFORMOBJ*
NTAPI
NtGdiFONTOBJ_pxoGetXform(
  IN FONTOBJ *pfo
);

W32KAPI
IFIMETRICS*
NTAPI
NtGdiFONTOBJ_pifi(
  IN FONTOBJ *pfo
);

W32KAPI
FD_GLYPHSET*
NTAPI
NtGdiFONTOBJ_pfdg(
  IN FONTOBJ *pfo
);

W32KAPI
ULONG
NTAPI
NtGdiFONTOBJ_cGetAllGlyphHandles(
  IN FONTOBJ *pfo,
  OUT OPTIONAL HGLYPH *phg
);

W32KAPI
PVOID
NTAPI
NtGdiFONTOBJ_pvTrueTypeFontFile(
  IN FONTOBJ *pfo,
  OUT ULONG *pcjFile
);

W32KAPI
PFD_GLYPHATTR
NTAPI
NtGdiFONTOBJ_pQueryGlyphAttrs(
  IN FONTOBJ *pfo,
  IN ULONG iMode
);

W32KAPI
BOOL
NTAPI
NtGdiSTROBJ_bEnum(
  IN STROBJ *pstro,
  OUT ULONG *pc,
  OUT PGLYPHPOS *ppgpos
);

W32KAPI
BOOL
NTAPI
NtGdiSTROBJ_bEnumPositionsOnly(
  IN STROBJ *pstro,
  OUT ULONG *pc,
  OUT PGLYPHPOS *ppgpos
);

W32KAPI
VOID
NTAPI
NtGdiSTROBJ_vEnumStart(
  IN STROBJ *pstro
);

W32KAPI
DWORD
NTAPI
NtGdiSTROBJ_dwGetCodePage(
  IN STROBJ *pstro
);

W32KAPI
BOOL
NTAPI
NtGdiSTROBJ_bGetAdvanceWidths(
  IN STROBJ *pstro,
  IN ULONG iFirst,
  IN ULONG c,
  OUT POINTQF *pptqD
);

W32KAPI
PFD_GLYPHSET
NTAPI
NtGdiEngComputeGlyphSet(
  IN INT nCodePage,
  IN INT nFirstChar,
  IN INT cChars
);

W32KAPI
ULONG
NTAPI
NtGdiXLATEOBJ_iXlate(
  IN XLATEOBJ *pxlo,
  IN ULONG iColor
);

W32KAPI
HANDLE
NTAPI
NtGdiXLATEOBJ_hGetColorTransform(
  IN XLATEOBJ *pxlo
);

W32KAPI
VOID
NTAPI
NtGdiPATHOBJ_vGetBounds(
  IN PATHOBJ *ppo,
  OUT PRECTFX prectfx
);

W32KAPI
BOOL
NTAPI
NtGdiPATHOBJ_bEnum(
  IN PATHOBJ *ppo,
  OUT PATHDATA *ppd
);

W32KAPI
VOID
NTAPI
NtGdiPATHOBJ_vEnumStart(
  IN PATHOBJ *ppo
);

W32KAPI
VOID
NTAPI
NtGdiEngDeletePath(
  IN PATHOBJ *ppo
);

W32KAPI
VOID
NTAPI
NtGdiPATHOBJ_vEnumStartClipLines(
  IN PATHOBJ *ppo,
  IN CLIPOBJ *pco,
  IN SURFOBJ *pso,
  IN LINEATTRS *pla
);

W32KAPI
BOOL
NTAPI
NtGdiPATHOBJ_bEnumClipLines(
  IN PATHOBJ *ppo,
  IN ULONG cb,
  OUT CLIPLINE *pcl
);

W32KAPI
BOOL
NTAPI
NtGdiEngCheckAbort(
  IN SURFOBJ *pso
);

W32KAPI
DHPDEV
NtGdiGetDhpdev(
  IN HDEV hdev
);

W32KAPI
LONG
NTAPI
NtGdiHT_Get8BPPFormatPalette(
  OUT OPTIONAL LPPALETTEENTRY pPaletteEntry,
  IN USHORT RedGamma,
  IN USHORT GreenGamma,
  IN USHORT BlueGamma
);

W32KAPI
LONG
NTAPI
NtGdiHT_Get8BPPMaskPalette(
  OUT OPTIONAL LPPALETTEENTRY pPaletteEntry,
  IN BOOL Use8BPPMaskPal,
  IN BYTE CMYMask,
  IN USHORT RedGamma,
  IN USHORT GreenGamma,
  IN USHORT BlueGamma
);

W32KAPI
BOOL
NtGdiUpdateTransform(
  IN HDC hdc
);

W32KAPI
DWORD
NTAPI
NtGdiSetLayout(
  IN HDC hdc,
  IN LONG wox,
  IN DWORD dwLayout
);

W32KAPI
BOOL
NTAPI
NtGdiMirrorWindowOrg(
  IN HDC hdc
);

W32KAPI
LONG
NTAPI
NtGdiGetDeviceWidth(
  IN HDC hdc
);

W32KAPI
BOOL
NtGdiSetPUMPDOBJ(
  IN HUMPD humpd,
  IN BOOL bStoreID,
  OUT HUMPD *phumpd,
  OUT BOOL *pbWOW64
);

W32KAPI
BOOL
NtGdiBRUSHOBJ_DeleteRbrush(
  IN BRUSHOBJ *pbo,
  IN BRUSHOBJ *pboB
);

W32KAPI
BOOL
NtGdiUMPDEngFreeUserMem(
  IN KERNEL_PVOID *ppv
);

W32KAPI
HBITMAP
NTAPI
NtGdiSetBitmapAttributes(
  IN HBITMAP hbm,
  IN DWORD dwFlags
);

W32KAPI
HBITMAP
NTAPI
NtGdiClearBitmapAttributes(
  IN HBITMAP hbm,
  IN DWORD dwFlags
);

W32KAPI
HBRUSH
NTAPI
NtGdiSetBrushAttributes(
  IN HBRUSH hbm,
  IN DWORD dwFlags
);

W32KAPI
HBRUSH
NTAPI
NtGdiClearBrushAttributes(
  IN HBRUSH hbm,
  IN DWORD dwFlags
);

W32KAPI
BOOL
NTAPI
NtGdiDrawStream(
  IN HDC hdcDst,
  IN ULONG cjIn,
  IN VOID *pvIn
);

W32KAPI
BOOL
NTAPI
NtGdiMakeObjectXferable(
  IN HANDLE h,
  IN DWORD dwProcessId
);

W32KAPI
BOOL
NTAPI
NtGdiMakeObjectUnXferable(
  IN HANDLE h
);

W32KAPI
BOOL
NTAPI
NtGdiInitSpool(
  VOID);

/* FIXME wrong prototypes fix the build */
W32KAPI
INT
NTAPI
NtGdiGetSpoolMessage(
  DWORD u1,
  DWORD u2,
  DWORD u3,
  DWORD u4);

#endif

